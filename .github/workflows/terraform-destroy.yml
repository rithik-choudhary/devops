name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        options:
          - development
          - production
      subnet_selection:
        description: 'Select Subnet Configuration'
        required: true
        type: choice
        options:
          - qa
          - production
          - sandbox
      service_name:
        description: 'Service Name to Destroy'
        required: true
        type: string
        default: 'new-api-service'
      target_group:
        description: 'Target Group Name to Destroy'
        required: true
        type: string
        default: 'new-api'
      rule_name:
        description: 'Listener Rule Name to Destroy'
        required: true
        type: string
        default: 'new-api-rule'

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ github.event.inputs.environment == 'production' && secrets.AWS_ACCESS_KEY_ID_PROD || secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ github.event.inputs.environment == 'production' && secrets.AWS_SECRET_ACCESS_KEY_PROD || secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: eu-north-1

    - name: Setup Environment Variables
      run: |
        # Set environment-specific variables based on subnet selection
        if [ "${{ github.event.inputs.subnet_selection }}" = "qa" ]; then
          echo "CLUSTER_NAME=QA-application-cluster" >> $GITHUB_ENV
          echo "SECURITY_GROUP=QA-application-sg" >> $GITHUB_ENV
          echo "SUBNET_IDS=[\"subnet-0133e140dad000778\",\"subnet-0573bc07a10596e57\"]" >> $GITHUB_ENV
          echo "LOAD_BALANCER=QA-applicaation-lb" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.subnet_selection }}" = "production" ]; then
          echo "CLUSTER_NAME=production-apps-cluster" >> $GITHUB_ENV
          echo "SECURITY_GROUP=prd-microservices-app-sg" >> $GITHUB_ENV
          echo "SUBNET_IDS=[\"subnet-0f85ea7a436938a94\",\"subnet-076d2bcb696eb955c\"]" >> $GITHUB_ENV
          echo "LOAD_BALANCER=prd-apps-lb" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.subnet_selection }}" = "sandbox" ]; then
          echo "CLUSTER_NAME=sandbox-apps-cluster" >> $GITHUB_ENV
          echo "SECURITY_GROUP=sandbox-microservices-app-sg" >> $GITHUB_ENV
          echo "SUBNET_IDS=[\"subnet-0a2b010ed79ff4e2a\",\"subnet-07551380cf98c3388\"]" >> $GITHUB_ENV
          echo "LOAD_BALANCER=sandbox-apps-lb" >> $GITHUB_ENV
        fi

    - name: Create Terraform Variables File
      run: |
        mkdir -p AWS_Service
        cat > AWS_Service/terraform.tfvars << EOF
        qa_cluster = "${{ env.CLUSTER_NAME }}"
        qa_security_group = "${{ env.SECURITY_GROUP }}"
        subnet_name = ${{ env.SUBNET_IDS }}
        qa_application_lb = "${{ env.LOAD_BALANCER }}"
        ECS_service_name = "${{ github.event.inputs.service_name }}"
        ECR_repository_name = "${{ github.event.inputs.service_name }}-images"
        ECS_task_defiantion_name = "${{ github.event.inputs.service_name }}-td"
        container_name = "${{ github.event.inputs.service_name }}-container"
        container_port = "9004"
        target_group = "${{ github.event.inputs.target_group }}"
        tag_name_ecr = "${{ github.event.inputs.service_name }}"
        domain_name = "api.example.com"
        rule_name = "${{ github.event.inputs.rule_name }}"
        EOF

    - name: Terraform Init
      working-directory: AWS_Service
      run: terraform init

    - name: Terraform Plan Destroy
      working-directory: AWS_Service
      run: terraform plan -destroy -out=destroy-plan

    - name: Terraform Destroy
      working-directory: AWS_Service
      run: terraform apply -auto-approve destroy-plan

    - name: Destroy Success Notification
      run: |
        echo "🗑️  Destruction completed successfully!"
        echo "Destroyed Service: ${{ github.event.inputs.service_name }}"
        echo "Destroyed Target Group: ${{ github.event.inputs.target_group }}"
        echo "Destroyed Rule: ${{ github.event.inputs.rule_name }}"

    - name: Cleanup
      if: always()
      working-directory: AWS_Service
      run: |
        rm -f destroy-plan
        rm -f terraform.tfstate* 