name: Terraform-Worker-Cluster-Prod-Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        options:
          - prod
          - sandbox
      service_name:
        description: 'Service Name'
        required: true
        type: string
        default: '@'
      ecr_repository_name:
        description: 'ECR Repository Name'
        required: true
        type: string
        default: '@-image'
      ecs_task_definition_name:
        description: 'ECS Task Definition Name'
        required: true
        type: string
        default: '@-td'
      container_name:
        description: 'Container Name'
        required: true
        type: string
        default: '@-container'
      container_port:
        description: 'Container Port'
        required: true
        type: string
        default: '9004'

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRD }}
        aws-region: ap-southeast-1

    - name: Setup Environment Variables
      run: |
        # Set environment-specific variables based on subnet selection
        if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
          echo "CLUSTER_NAME=production-worker-cluster" >> $GITHUB_ENV
          echo "SECURITY_GROUP=prd-worker-sg" >> $GITHUB_ENV
          echo "SUBNET_IDS=[\"subnet-0f85ea7a436938a94\",\"subnet-076d2bcb696eb955c\"]" >> $GITHUB_ENV
          echo "region=ap-southeast-1" >> $GITHUB_ENV
          
        elif [ "${{ github.event.inputs.environment }}" = "sandbox" ]; then
          echo "CLUSTER_NAME=sandbox-worker-cluster" >> $GITHUB_ENV
          echo "SECURITY_GROUP=sandbox-worker-sg" >> $GITHUB_ENV
          echo "SUBNET_IDS=[\"subnet-0a2b010ed79ff4e2a\",\"subnet-07551380cf98c3388\"]" >> $GITHUB_ENV
          echo "region=ap-southeast-1" >> $GITHUB_ENV        
        fi

    - name: Create Terraform Variables File
      run: |
        mkdir -p Worker-Cluster-Service
        cat > Worker-Cluster-Service/terraform.tfvars << EOF
        qa_cluster = "${{ env.CLUSTER_NAME }}"
        region = "${{ env.region }}"
        qa_security_group = "${{ env.SECURITY_GROUP }}"
        subnet_name = ${{ env.SUBNET_IDS }}
        ECS_service_name = "${{ github.event.inputs.service_name }}"
        ECR_repository_name = "${{ github.event.inputs.ecr_repository_name }}"
        ECS_task_defiantion_name = "${{ github.event.inputs.ecs_task_definition_name }}"
        container_name = "${{ github.event.inputs.container_name }}"
        container_port = "${{ github.event.inputs.container_port }}"
        EOF

    - name: Terraform Init
      working-directory: Worker-Cluster-Service
      run: terraform init

    - name: Terraform Plan
      working-directory: Worker-Cluster-Service
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: Worker-Cluster-Service
      run: terraform apply -auto-approve tfplan

    - name: Deployment Success Notification
      run: |
        echo "✅ Deployment completed successfully!"
        echo "Service: ${{ github.event.inputs.service_name }}"
        echo ""
        echo "⚠️  You have 2 minutes to destroy this deployment if needed."
        echo "Go to Actions tab and run 'Terraform Destroy' workflow within 2 minutes."

    - name: Wait for 2 minutes
      run: sleep 120

    - name: Cleanup
      if: always()
      working-directory: Worker-Cluster-Service
      run: |
        rm -f tfplan
        rm -f terraform.tfstate*
