name: Deploy AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select Environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
      
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'eu-north-1'
        type: choice
        options:
        - eu-north-1
        - us-east-1
        - us-west-2
        - eu-west-1
        - ap-south-1
      
      cluster_name:
        description: 'ECS Cluster Name'
        required: true
        type: string
        default: 'QA-application-cluster'
      
      security_group:
        description: 'Security Group Name'
        required: true
        type: string
        default: 'QA-application-sg'
      
      subnet_selection:
        description: 'Select Subnet Environment'
        required: true
        type: choice
        options:
        - qa
        - production
        - sandbox
        - development
      
      subnet_ids:
        description: 'Subnet IDs (comma-separated, optional - will use defaults based on selection)'
        required: false
        type: string
      
      load_balancer_name:
        description: 'Load Balancer Name'
        required: true
        type: string
        default: 'QA-applicaation-lb'
      
      service_name:
        description: 'ECS Service Name'
        required: true
        type: string
        default: 'my-api-service'
      
      ecr_repository_name:
        description: 'ECR Repository Name'
        required: true
        type: string
        default: 'my-api-images'
      
      task_definition_name:
        description: 'ECS Task Definition Name'
        required: true
        type: string
        default: 'my-api-td'
      
      container_name:
        description: 'Container Name'
        required: true
        type: string
        default: 'my-api-container'
      
      container_port:
        description: 'Container Port'
        required: true
        type: string
        default: '9004'
      
      target_group_name:
        description: 'Target Group Name'
        required: true
        type: string
        default: 'my-api-tg'
      
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.5.0'
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ github.event.inputs.environment == 'production' && secrets.AWS_ACCESS_KEY_ID_PROD || secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ github.event.inputs.environment == 'production' && secrets.AWS_SECRET_ACCESS_KEY_PROD || secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ github.event.inputs.aws_region }}

    - name: Determine Subnet IDs
      id: subnets
      run: |
        if [[ -n "${{ github.event.inputs.subnet_ids }}" ]]; then
          # Use custom subnet IDs if provided
          SUBNET_LIST="${{ github.event.inputs.subnet_ids }}"
        else
          # Use predefined subnets based on selection
          case "${{ github.event.inputs.subnet_selection }}" in
            "qa")
              SUBNET_LIST="subnet-0133e140dad000778,subnet-0573bc07a10596e57"
              ;;
            "production")
              SUBNET_LIST="subnet-0f85ea7a436938a94,subnet-076d2bcb696eb955c"
              ;;
            "sandbox")
              SUBNET_LIST="subnet-0a2b010ed79ff4e2a,subnet-07551380cf98c3388"
              ;;
            "development")
              SUBNET_LIST="subnet-0133e140dad000778,subnet-0573bc07a10596e57"
              ;;
            *)
              SUBNET_LIST="subnet-0133e140dad000778,subnet-0573bc07a10596e57"
              ;;
          esac
        fi
        
        # Convert comma-separated list to JSON array format for Terraform
        SUBNET_ARRAY=$(echo $SUBNET_LIST | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
        echo "subnet_array=$SUBNET_ARRAY" >> $GITHUB_OUTPUT
        echo "Selected subnets: $SUBNET_ARRAY"

    - name: Create Terraform Variables File
      run: |
        cat > AWS_Service/terraform.tfvars << EOF
        environment = "${{ github.event.inputs.environment }}"
        aws_region = "${{ github.event.inputs.aws_region }}"
        qa_cluster = "${{ github.event.inputs.cluster_name }}"
        qa_security_group = "${{ github.event.inputs.security_group }}"
        subnet_name = ${{ steps.subnets.outputs.subnet_array }}
        qa_application_lb = "${{ github.event.inputs.load_balancer_name }}"
        ECS_service_name = "${{ github.event.inputs.service_name }}"
        ECR_repository_name = "${{ github.event.inputs.ecr_repository_name }}"
        ECS_task_defiantion_name = "${{ github.event.inputs.task_definition_name }}"
        container_name = "${{ github.event.inputs.container_name }}"
        container_port = ${{ github.event.inputs.container_port }}
        target_group = "${{ github.event.inputs.target_group_name }}"
        tag_name_ecr = "${{ github.event.inputs.ecr_repository_name }}"
        EOF
        
        echo "Generated terraform.tfvars:"
        cat AWS_Service/terraform.tfvars

    - name: Terraform Init
      working-directory: ./AWS_Service
      run: terraform init -input=false

    - name: Terraform Format Check
      working-directory: ./AWS_Service
      run: terraform fmt -check -diff || true

    - name: Terraform Validate
      working-directory: ./AWS_Service
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./AWS_Service
      run: |
        terraform plan -input=false -var-file="terraform.tfvars" -out=terraform.plan
        terraform show -no-color terraform.plan > plan_output.txt
      
    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('AWS_Service/plan_output.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters);
          
          for (let i = 0; i < planChunks.length; i++) {
            const chunk = planChunks[i];
            const header = i === 0 ? '## Terraform Plan Output\n\n' : `## Terraform Plan Output (continued ${i + 1})\n\n`;
            const body = `${header}<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${chunk}\n\`\`\`\n\n</details>`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      working-directory: ./AWS_Service
      run: terraform apply -input=false -auto-approve terraform.plan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      working-directory: ./AWS_Service
      run: terraform destroy -input=false -auto-approve -var-file="terraform.tfvars"

    - name: Output Important Values
      if: github.event.inputs.action == 'apply'
      working-directory: ./AWS_Service
      run: |
        echo "## Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "Region: ${{ github.event.inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if terraform output ecr_repository_url >/dev/null 2>&1; then
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "ECR Repository URL: $ECR_URL" >> $GITHUB_STEP_SUMMARY
        fi
        
        if terraform output qa_application_lb_dns >/dev/null 2>&1; then
          LB_DNS=$(terraform output -raw qa_application_lb_dns)
          echo "Load Balancer DNS: $LB_DNS" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Service Name: ${{ github.event.inputs.service_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Container Port: ${{ github.event.inputs.container_port }}" >> $GITHUB_STEP_SUMMARY

    - name: Show Deployment Summary
      run: |
        echo "=== Deployment Summary ==="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Action: ${{ github.event.inputs.action }}"
        echo "Region: ${{ github.event.inputs.aws_region }}"
        echo "Service: ${{ github.event.inputs.service_name }}"
        echo "Cluster: ${{ github.event.inputs.cluster_name }}"
        echo "Subnets: ${{ steps.subnets.outputs.subnet_array }}"
